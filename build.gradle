plugins {
  id 'java-library'
  id 'maven-publish'
  id 'net.neoforged.moddev' version '2.0.27-beta'
}

tasks.named('wrapper', Wrapper).configure {
  distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
  mavenLocal()
  mavenCentral()

  // JEI
  maven {
    name 'JEI Maven'
    url 'https://maven.blamejared.com'
  }

  // JEI (fallback)
  maven {
    name 'ModMaven'
    url 'https://modmaven.dev'
  }

  // CF Maven
  maven {
    name 'Curse Maven'
    url 'https://www.cursemaven.com'
    content {
      includeGroup 'curse.maven'
    }
  }
}

base {
  archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
  version = project.neo_version

  parchment {
    mappingsVersion = project.parchment_mappings_version
    minecraftVersion = project.parchment_minecraft_version
  }

  runs {
    client {
      client()
      gameDirectory = project.file('run/client')
      systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    server {
      server()
      gameDirectory = project.file('run/server')
      programArgument '--nogui'
      systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    gameTestServer {
      type = "gameTestServer"
      systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
      data()
      gameDirectory = project.file('run/data')
      programArguments.addAll '--mod', project.mod_id, '--all',
        '--output', file('src/generated/resources/').getAbsolutePath(),
        '--existing', file('src/main/resources/').getAbsolutePath()
    }

    configureEach {
      logLevel = org.slf4j.event.Level.DEBUG

      // SCAN          Mod scanning": For mods scan.
      // REGISTRIES    Registry events
      // REGISTRYDUMP  Dump all registries
      systemProperty 'forge.logging.markers', 'SCAN,REGISTRIES'
    }
  }

  mods {
    "${mod_id}" {
      sourceSet(sourceSets.main)
    }
  }

  unitTest {
    enable()
    testedMod = mods.getAt(0)
  }
}

test {
  useJUnitPlatform()
}

sourceSets.main.resources {
  srcDir 'src/generated/resources'
}

configurations {
  runtimeClasspath.extendsFrom localRuntime
}

dependencies {
  // JUnit
  testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  System.out.println(String.format("jei_enabled == %s", jei_enabled));
  System.out.println(String.format("jade_enabled == %s", jade_enabled));
  System.out.println(String.format("xaeros_minimap_enabled == %s", xaeros_minimap_enabled));

  // JEI
  if (jei_enabled == "true") {
    runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")
    // To compile against the JEI api (e.g. for a JEI plugin), uncomment:
    //compileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    //compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
  }

  // Jade
  if (jade_enabled == "true") {
    implementation "curse.maven:jade-324717:${jade_file_id}"
  }

  // Xaero's Minimap
  if (xaeros_minimap_enabled == "true") {
    implementation "curse.maven:xaeros-minimap-263420:${xaeros_minimap_file_id}"
  }
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
  var replaceProperties = [
    minecraft_version: minecraft_version,
    minecraft_version_range: minecraft_version_range,
    neo_version: neo_version,
    neo_version_range: neo_version_range,
    loader_version_range: loader_version_range,
    mod_id: mod_id,
    mod_name: mod_name,
    mod_license: mod_license,
    mod_version: mod_version,
    mod_authors: mod_authors,
    mod_description: mod_description
  ]
  inputs.properties replaceProperties
  expand replaceProperties
  from "src/main/templates"
  into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata

neoForge.ideSyncTask generateModMetadata

publishing {
  publications {
    register('mavenJava', MavenPublication) {
      from components.java
    }
  }
  repositories {
    maven {
      url "file://${project.projectDir}/repo"
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}

idea {
  module {
    downloadSources = true
    downloadJavadoc = true
  }
}

//
// vim: ts=2 sw=2 et fdm=marker :